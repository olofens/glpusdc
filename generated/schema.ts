// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GlpUSDCMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlpUSDCMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlpUSDCMetric must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GlpUSDCMetric", id.toString(), this);
    }
  }

  static load(id: string): GlpUSDCMetric | null {
    return changetype<GlpUSDCMetric | null>(store.get("GlpUSDCMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get isotime(): string {
    let value = this.get("isotime");
    return value!.toString();
  }

  set isotime(value: string) {
    this.set("isotime", Value.fromString(value));
  }

  get USDCCount(): BigDecimal {
    let value = this.get("USDCCount");
    return value!.toBigDecimal();
  }

  set USDCCount(value: BigDecimal) {
    this.set("USDCCount", Value.fromBigDecimal(value));
  }

  get GLPCount(): BigDecimal {
    let value = this.get("GLPCount");
    return value!.toBigDecimal();
  }

  set GLPCount(value: BigDecimal) {
    this.set("GLPCount", Value.fromBigDecimal(value));
  }

  get sbfGMXCount(): BigDecimal {
    let value = this.get("sbfGMXCount");
    return value!.toBigDecimal();
  }

  set sbfGMXCount(value: BigDecimal) {
    this.set("sbfGMXCount", Value.fromBigDecimal(value));
  }

  get usdcPerShare(): BigDecimal {
    let value = this.get("usdcPerShare");
    return value!.toBigDecimal();
  }

  set usdcPerShare(value: BigDecimal) {
    this.set("usdcPerShare", Value.fromBigDecimal(value));
  }

  get sBtcAllocInUSDC(): BigDecimal {
    let value = this.get("sBtcAllocInUSDC");
    return value!.toBigDecimal();
  }

  set sBtcAllocInUSDC(value: BigDecimal) {
    this.set("sBtcAllocInUSDC", Value.fromBigDecimal(value));
  }

  get sEthAllocInUSDC(): BigDecimal {
    let value = this.get("sEthAllocInUSDC");
    return value!.toBigDecimal();
  }

  set sEthAllocInUSDC(value: BigDecimal) {
    this.set("sEthAllocInUSDC", Value.fromBigDecimal(value));
  }

  get glpAllocInUSDC(): BigDecimal {
    let value = this.get("glpAllocInUSDC");
    return value!.toBigDecimal();
  }

  set glpAllocInUSDC(value: BigDecimal) {
    this.set("glpAllocInUSDC", Value.fromBigDecimal(value));
  }

  get btcLeverageIndex(): BigInt {
    let value = this.get("btcLeverageIndex");
    return value!.toBigInt();
  }

  set btcLeverageIndex(value: BigInt) {
    this.set("btcLeverageIndex", Value.fromBigInt(value));
  }

  get ethLeverageIndex(): BigInt {
    let value = this.get("ethLeverageIndex");
    return value!.toBigInt();
  }

  set ethLeverageIndex(value: BigInt) {
    this.set("ethLeverageIndex", Value.fromBigInt(value));
  }

  get glpUSDCSupply(): BigDecimal {
    let value = this.get("glpUSDCSupply");
    return value!.toBigDecimal();
  }

  set glpUSDCSupply(value: BigDecimal) {
    this.set("glpUSDCSupply", Value.fromBigDecimal(value));
  }

  get totalAssets(): BigDecimal {
    let value = this.get("totalAssets");
    return value!.toBigDecimal();
  }

  set totalAssets(value: BigDecimal) {
    this.set("totalAssets", Value.fromBigDecimal(value));
  }
}
