// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CapSet extends ethereum.Event {
  get params(): CapSet__Params {
    return new CapSet__Params(this);
  }
}

export class CapSet__Params {
  _event: CapSet;

  constructor(event: CapSet) {
    this._event = event;
  }

  get oldCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CollectVaultFees extends ethereum.Event {
  get params(): CollectVaultFees__Params {
    return new CollectVaultFees__Params(this);
  }
}

export class CollectVaultFees__Params {
  _event: CollectVaultFees;

  constructor(event: CollectVaultFees) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CommitAndClose extends ethereum.Event {
  get params(): CommitAndClose__Params {
    return new CommitAndClose__Params(this);
  }
}

export class CommitAndClose__Params {
  _event: CommitAndClose;

  constructor(event: CommitAndClose) {
    this._event = event;
  }

  get _round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _profitAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _glpAllocation(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _sbtcAllocation(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _sethAllocation(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositFeeSet extends ethereum.Event {
  get params(): DepositFeeSet__Params {
    return new DepositFeeSet__Params(this);
  }
}

export class DepositFeeSet__Params {
  _event: DepositFeeSet;

  constructor(event: DepositFeeSet) {
    this._event = event;
  }

  get depositFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDepositFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositRound extends ethereum.Event {
  get params(): DepositRound__Params {
    return new DepositRound__Params(this);
  }
}

export class DepositRound__Params {
  _event: DepositRound;

  constructor(event: DepositRound) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitiateVaultMigration extends ethereum.Event {
  get params(): InitiateVaultMigration__Params {
    return new InitiateVaultMigration__Params(this);
  }
}

export class InitiateVaultMigration__Params {
  _event: InitiateVaultMigration;

  constructor(event: InitiateVaultMigration) {
    this._event = event;
  }

  get _timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _migrationActiveTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InitiateWithdraw extends ethereum.Event {
  get params(): InitiateWithdraw__Params {
    return new InitiateWithdraw__Params(this);
  }
}

export class InitiateWithdraw__Params {
  _event: InitiateWithdraw;

  constructor(event: InitiateWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManagementFeeSet extends ethereum.Event {
  get params(): ManagementFeeSet__Params {
    return new ManagementFeeSet__Params(this);
  }
}

export class ManagementFeeSet__Params {
  _event: ManagementFeeSet;

  constructor(event: ManagementFeeSet) {
    this._event = event;
  }

  get managementFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newManagementFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PerformanceFeeSet extends ethereum.Event {
  get params(): PerformanceFeeSet__Params {
    return new PerformanceFeeSet__Params(this);
  }
}

export class PerformanceFeeSet__Params {
  _event: PerformanceFeeSet;

  constructor(event: PerformanceFeeSet) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPerformanceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RollToNextPosition extends ethereum.Event {
  get params(): RollToNextPosition__Params {
    return new RollToNextPosition__Params(this);
  }
}

export class RollToNextPosition__Params {
  _event: RollToNextPosition;

  constructor(event: RollToNextPosition) {
    this._event = event;
  }

  get _lockedInStrategy(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _queuedWithdrawAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TracerClose extends ethereum.Event {
  get params(): TracerClose__Params {
    return new TracerClose__Params(this);
  }
}

export class TracerClose__Params {
  _event: TracerClose;

  constructor(event: TracerClose) {
    this._event = event;
  }

  get _sbtcAllocation(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sethAllocation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TracerOpen extends ethereum.Event {
  get params(): TracerOpen__Params {
    return new TracerOpen__Params(this);
  }
}

export class TracerOpen__Params {
  _event: TracerOpen;

  constructor(event: TracerOpen) {
    this._event = event;
  }

  get _sbtcAllocation(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sethAllocation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatePricePerShare extends ethereum.Event {
  get params(): UpdatePricePerShare__Params {
    return new UpdatePricePerShare__Params(this);
  }
}

export class UpdatePricePerShare__Params {
  _event: UpdatePricePerShare;

  constructor(event: UpdatePricePerShare) {
    this._event = event;
  }

  get _round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _pricePerShare(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawalFeeSet extends ethereum.Event {
  get params(): WithdrawalFeeSet__Params {
    return new WithdrawalFeeSet__Params(this);
  }
}

export class WithdrawalFeeSet__Params {
  _event: WithdrawalFeeSet;

  constructor(event: WithdrawalFeeSet) {
    this._event = event;
  }

  get withdrawalFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newWithdrawalFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GlpUSDCVault__btcLeverageSetsResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getPoolCommitter(): Address {
    return this.value1;
  }

  getLeveragePool(): Address {
    return this.value2;
  }
}

export class GlpUSDCVault__ethLeverageSetsResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getPoolCommitter(): Address {
    return this.value1;
  }

  getLeveragePool(): Address {
    return this.value2;
  }
}

export class GlpUSDCVault__getNextLockedQueuedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLockedBalance(): BigInt {
    return this.value0;
  }

  getQueuedWithdrawAmount(): BigInt {
    return this.value1;
  }
}

export class GlpUSDCVault__strategyStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getActiveSbtcAllocation(): BigInt {
    return this.value0;
  }

  getActiveSethAllocation(): BigInt {
    return this.value1;
  }

  getActiveGlpAllocation(): BigInt {
    return this.value2;
  }

  getActiveBtcLeverageIndex(): BigInt {
    return this.value3;
  }

  getActiveEthLeverageIndex(): BigInt {
    return this.value4;
  }

  getNextSbtcAllocation(): BigInt {
    return this.value5;
  }

  getNextSethAllocation(): BigInt {
    return this.value6;
  }

  getNextGlpAllocation(): BigInt {
    return this.value7;
  }
}

export class GlpUSDCVault__vaultParamsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: Address;
  value7: Address;
  value8: Address;
  value9: Address;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: Address,
    value7: Address,
    value8: Address,
    value9: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    return map;
  }

  getDecimals(): i32 {
    return this.value0;
  }

  getMinimumSupply(): BigInt {
    return this.value1;
  }

  getCap(): BigInt {
    return this.value2;
  }

  getAsset(): Address {
    return this.value3;
  }

  getStakedGlp(): Address {
    return this.value4;
  }

  getEsGMX(): Address {
    return this.value5;
  }

  getGlpPricing(): Address {
    return this.value6;
  }

  getHedgePricing(): Address {
    return this.value7;
  }

  getSbtcStake(): Address {
    return this.value8;
  }

  getSethStake(): Address {
    return this.value9;
  }
}

export class GlpUSDCVault__vaultStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getRound(): BigInt {
    return this.value0;
  }

  getLockedAmount(): BigInt {
    return this.value1;
  }

  getLastLockedAmount(): BigInt {
    return this.value2;
  }

  getTotalPending(): BigInt {
    return this.value3;
  }

  getQueuedWithdrawShares(): BigInt {
    return this.value4;
  }

  getEpochStart(): BigInt {
    return this.value5;
  }

  getEpochEnd(): BigInt {
    return this.value6;
  }
}

export class GlpUSDCVault__withdrawalsResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRound(): i32 {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }
}

export class GlpUSDCVault extends ethereum.SmartContract {
  static bind(address: Address): GlpUSDCVault {
    return new GlpUSDCVault("GlpUSDCVault", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DAY(): BigInt {
    let result = super.call("DAY", "DAY():(uint32)", []);

    return result[0].toBigInt();
  }

  try_DAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DAY", "DAY():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GLP_MANAGER(): Address {
    let result = super.call("GLP_MANAGER", "GLP_MANAGER():(address)", []);

    return result[0].toAddress();
  }

  try_GLP_MANAGER(): ethereum.CallResult<Address> {
    let result = super.tryCall("GLP_MANAGER", "GLP_MANAGER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GLP_REWARD_ROUTER(): Address {
    let result = super.call(
      "GLP_REWARD_ROUTER",
      "GLP_REWARD_ROUTER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_GLP_REWARD_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "GLP_REWARD_ROUTER",
      "GLP_REWARD_ROUTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  KEEPER_ROLE(): Bytes {
    let result = super.call("KEEPER_ROLE", "KEEPER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_KEEPER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("KEEPER_ROLE", "KEEPER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_INT(): BigInt {
    let result = super.call("MAX_INT", "MAX_INT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_INT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_INT", "MAX_INT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SCALE(): BigInt {
    let result = super.call("SCALE", "SCALE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SCALE", "SCALE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TCR(): Address {
    let result = super.call("TCR", "TCR():(address)", []);

    return result[0].toAddress();
  }

  try_TCR(): ethereum.CallResult<Address> {
    let result = super.tryCall("TCR", "TCR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountVaultBalance(account: Address): BigInt {
    let result = super.call(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_accountVaultBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  btcLeverageSets(param0: BigInt): GlpUSDCVault__btcLeverageSetsResult {
    let result = super.call(
      "btcLeverageSets",
      "btcLeverageSets(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GlpUSDCVault__btcLeverageSetsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_btcLeverageSets(
    param0: BigInt
  ): ethereum.CallResult<GlpUSDCVault__btcLeverageSetsResult> {
    let result = super.tryCall(
      "btcLeverageSets",
      "btcLeverageSets(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__btcLeverageSetsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chainlinkOracle(): Address {
    let result = super.call(
      "chainlinkOracle",
      "chainlinkOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_chainlinkOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "chainlinkOracle",
      "chainlinkOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkpointTotalBalance(): BigInt {
    let result = super.call(
      "checkpointTotalBalance",
      "checkpointTotalBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkpointTotalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkpointTotalBalance",
      "checkpointTotalBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitAndClose(
    nextSbtcAllocation: BigInt,
    nextSethAllocation: BigInt,
    nextGlpAllocation: BigInt,
    _settlePositions: boolean,
    _handleTcrEmissions: boolean
  ): BigInt {
    let result = super.call(
      "commitAndClose",
      "commitAndClose(uint112,uint112,uint112,bool,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nextSbtcAllocation),
        ethereum.Value.fromUnsignedBigInt(nextSethAllocation),
        ethereum.Value.fromUnsignedBigInt(nextGlpAllocation),
        ethereum.Value.fromBoolean(_settlePositions),
        ethereum.Value.fromBoolean(_handleTcrEmissions)
      ]
    );

    return result[0].toBigInt();
  }

  try_commitAndClose(
    nextSbtcAllocation: BigInt,
    nextSethAllocation: BigInt,
    nextGlpAllocation: BigInt,
    _settlePositions: boolean,
    _handleTcrEmissions: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitAndClose",
      "commitAndClose(uint112,uint112,uint112,bool,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nextSbtcAllocation),
        ethereum.Value.fromUnsignedBigInt(nextSethAllocation),
        ethereum.Value.fromUnsignedBigInt(nextGlpAllocation),
        ethereum.Value.fromBoolean(_settlePositions),
        ethereum.Value.fromBoolean(_handleTcrEmissions)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(_shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(_shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(_assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_assets)]
    );

    return result[0].toBigInt();
  }

  try_convertToShares(_assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit(amount: BigInt, creditor: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(creditor)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(amount: BigInt, creditor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(creditor)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositFee(): BigInt {
    let result = super.call("depositFee", "depositFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositFee", "depositFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  encoder(): Address {
    let result = super.call("encoder", "encoder():(address)", []);

    return result[0].toAddress();
  }

  try_encoder(): ethereum.CallResult<Address> {
    let result = super.tryCall("encoder", "encoder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epochDuration(): BigInt {
    let result = super.call("epochDuration", "epochDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochDuration",
      "epochDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethLeverageSets(param0: BigInt): GlpUSDCVault__ethLeverageSetsResult {
    let result = super.call(
      "ethLeverageSets",
      "ethLeverageSets(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GlpUSDCVault__ethLeverageSetsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_ethLeverageSets(
    param0: BigInt
  ): ethereum.CallResult<GlpUSDCVault__ethLeverageSetsResult> {
    let result = super.tryCall(
      "ethLeverageSets",
      "ethLeverageSets(uint256):(address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__ethLeverageSetsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNextLockedQueued(): GlpUSDCVault__getNextLockedQueuedResult {
    let result = super.call(
      "getNextLockedQueued",
      "getNextLockedQueued():(uint256,uint256)",
      []
    );

    return new GlpUSDCVault__getNextLockedQueuedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getNextLockedQueued(): ethereum.CallResult<
    GlpUSDCVault__getNextLockedQueuedResult
  > {
    let result = super.tryCall(
      "getNextLockedQueued",
      "getNextLockedQueued():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__getNextLockedQueuedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  glpCloseSlippage(): BigInt {
    let result = super.call(
      "glpCloseSlippage",
      "glpCloseSlippage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_glpCloseSlippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "glpCloseSlippage",
      "glpCloseSlippage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  glpPricing(): Address {
    let result = super.call("glpPricing", "glpPricing():(address)", []);

    return result[0].toAddress();
  }

  try_glpPricing(): ethereum.CallResult<Address> {
    let result = super.tryCall("glpPricing", "glpPricing():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hedgePricing(): Address {
    let result = super.call("hedgePricing", "hedgePricing():(address)", []);

    return result[0].toAddress();
  }

  try_hedgePricing(): ethereum.CallResult<Address> {
    let result = super.tryCall("hedgePricing", "hedgePricing():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hedgeStakingActive(): boolean {
    let result = super.call(
      "hedgeStakingActive",
      "hedgeStakingActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hedgeStakingActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hedgeStakingActive",
      "hedgeStakingActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastQueuedWithdrawAmount(): BigInt {
    let result = super.call(
      "lastQueuedWithdrawAmount",
      "lastQueuedWithdrawAmount():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastQueuedWithdrawAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastQueuedWithdrawAmount",
      "lastQueuedWithdrawAmount():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lateWithdrawPeriod(): boolean {
    let result = super.call(
      "lateWithdrawPeriod",
      "lateWithdrawPeriod():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_lateWithdrawPeriod(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "lateWithdrawPeriod",
      "lateWithdrawPeriod():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedInStrategy(): BigInt {
    let result = super.call(
      "lockedInStrategy",
      "lockedInStrategy():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockedInStrategy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedInStrategy",
      "lockedInStrategy():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managementFee(): BigInt {
    let result = super.call("managementFee", "managementFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managementFee",
      "managementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  migrationTimestamp(): BigInt {
    let result = super.call(
      "migrationTimestamp",
      "migrationTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_migrationTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "migrationTimestamp",
      "migrationTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewDeposit(_assets: BigInt): BigInt {
    let result = super.call(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_assets)]
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(_assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(_shares: BigInt): BigInt {
    let result = super.call("previewMint", "previewMint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares)
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(_shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewMint",
      "previewMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(_shares: BigInt): BigInt {
    let result = super.call(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(_shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShare(): BigInt {
    let result = super.call("pricePerShare", "pricePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pricePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundPricePerShare(param0: BigInt): BigInt {
    let result = super.call(
      "roundPricePerShare",
      "roundPricePerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_roundPricePerShare(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundPricePerShare",
      "roundPricePerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundQueuedWithdrawalShares(param0: BigInt): BigInt {
    let result = super.call(
      "roundQueuedWithdrawalShares",
      "roundQueuedWithdrawalShares(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_roundQueuedWithdrawalShares(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundQueuedWithdrawalShares",
      "roundQueuedWithdrawalShares(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shares(_account: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_shares(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortBurn(): i32 {
    let result = super.call("shortBurn", "shortBurn():(uint8)", []);

    return result[0].toI32();
  }

  try_shortBurn(): ethereum.CallResult<i32> {
    let result = super.tryCall("shortBurn", "shortBurn():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  shortMint(): i32 {
    let result = super.call("shortMint", "shortMint():(uint8)", []);

    return result[0].toI32();
  }

  try_shortMint(): ethereum.CallResult<i32> {
    let result = super.tryCall("shortMint", "shortMint():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  strategyState(): GlpUSDCVault__strategyStateResult {
    let result = super.call(
      "strategyState",
      "strategyState():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new GlpUSDCVault__strategyStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_strategyState(): ethereum.CallResult<GlpUSDCVault__strategyStateResult> {
    let result = super.tryCall(
      "strategyState",
      "strategyState():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__strategyStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapSlippage(): BigInt {
    let result = super.call("swapSlippage", "swapSlippage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapSlippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapSlippage", "swapSlippage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tcrStrategy(): Address {
    let result = super.call("tcrStrategy", "tcrStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_tcrStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall("tcrStrategy", "tcrStrategy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPending(): BigInt {
    let result = super.call("totalPending", "totalPending():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPending(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPending", "totalPending():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSbtcBalance(): BigInt {
    let result = super.call(
      "totalSbtcBalance",
      "totalSbtcBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSbtcBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSbtcBalance",
      "totalSbtcBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSethBalance(): BigInt {
    let result = super.call(
      "totalSethBalance",
      "totalSethBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSethBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSethBalance",
      "totalSethBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultParams(): GlpUSDCVault__vaultParamsResult {
    let result = super.call(
      "vaultParams",
      "vaultParams():(uint8,uint56,uint104,address,address,address,address,address,address,address)",
      []
    );

    return new GlpUSDCVault__vaultParamsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toAddress(),
      result[9].toAddress()
    );
  }

  try_vaultParams(): ethereum.CallResult<GlpUSDCVault__vaultParamsResult> {
    let result = super.tryCall(
      "vaultParams",
      "vaultParams():(uint8,uint56,uint104,address,address,address,address,address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__vaultParamsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toAddress(),
        value[8].toAddress(),
        value[9].toAddress()
      )
    );
  }

  vaultState(): GlpUSDCVault__vaultStateResult {
    let result = super.call(
      "vaultState",
      "vaultState():(uint104,uint104,uint104,uint128,uint128,uint256,uint256)",
      []
    );

    return new GlpUSDCVault__vaultStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_vaultState(): ethereum.CallResult<GlpUSDCVault__vaultStateResult> {
    let result = super.tryCall(
      "vaultState",
      "vaultState():(uint104,uint104,uint104,uint128,uint128,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__vaultStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  whitelistLibrary(): Address {
    let result = super.call(
      "whitelistLibrary",
      "whitelistLibrary():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_whitelistLibrary(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistLibrary",
      "whitelistLibrary():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawalFee(): BigInt {
    let result = super.call("withdrawalFee", "withdrawalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalFee",
      "withdrawalFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawals(param0: Address): GlpUSDCVault__withdrawalsResult {
    let result = super.call(
      "withdrawals",
      "withdrawals(address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GlpUSDCVault__withdrawalsResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_withdrawals(
    param0: Address
  ): ethereum.CallResult<GlpUSDCVault__withdrawalsResult> {
    let result = super.tryCall(
      "withdrawals",
      "withdrawals(address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GlpUSDCVault__withdrawalsResult(value[0].toI32(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _keeper(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _managementFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _depositFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _vaultRound(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _vaultParams(): ConstructorCall_vaultParamsStruct {
    return changetype<ConstructorCall_vaultParamsStruct>(
      this._call.inputValues[7].value.toTuple()
    );
  }

  get _glpRouter(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _glpManager(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _uniswapRouter(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_vaultParamsStruct extends ethereum.Tuple {
  get decimals(): i32 {
    return this[0].toI32();
  }

  get minimumSupply(): BigInt {
    return this[1].toBigInt();
  }

  get cap(): BigInt {
    return this[2].toBigInt();
  }

  get asset(): Address {
    return this[3].toAddress();
  }

  get stakedGlp(): Address {
    return this[4].toAddress();
  }

  get esGMX(): Address {
    return this[5].toAddress();
  }

  get glpPricing(): Address {
    return this[6].toAddress();
  }

  get hedgePricing(): Address {
    return this[7].toAddress();
  }

  get sbtcStake(): Address {
    return this[8].toAddress();
  }

  get sethStake(): Address {
    return this[9].toAddress();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimShortsCall extends ethereum.Call {
  get inputs(): ClaimShortsCall__Inputs {
    return new ClaimShortsCall__Inputs(this);
  }

  get outputs(): ClaimShortsCall__Outputs {
    return new ClaimShortsCall__Outputs(this);
  }
}

export class ClaimShortsCall__Inputs {
  _call: ClaimShortsCall;

  constructor(call: ClaimShortsCall) {
    this._call = call;
  }
}

export class ClaimShortsCall__Outputs {
  _call: ClaimShortsCall;

  constructor(call: ClaimShortsCall) {
    this._call = call;
  }
}

export class CommitAndCloseCall extends ethereum.Call {
  get inputs(): CommitAndCloseCall__Inputs {
    return new CommitAndCloseCall__Inputs(this);
  }

  get outputs(): CommitAndCloseCall__Outputs {
    return new CommitAndCloseCall__Outputs(this);
  }
}

export class CommitAndCloseCall__Inputs {
  _call: CommitAndCloseCall;

  constructor(call: CommitAndCloseCall) {
    this._call = call;
  }

  get nextSbtcAllocation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nextSethAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nextGlpAllocation(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _settlePositions(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _handleTcrEmissions(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class CommitAndCloseCall__Outputs {
  _call: CommitAndCloseCall;

  constructor(call: CommitAndCloseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CompleteWithdrawCall extends ethereum.Call {
  get inputs(): CompleteWithdrawCall__Inputs {
    return new CompleteWithdrawCall__Inputs(this);
  }

  get outputs(): CompleteWithdrawCall__Outputs {
    return new CompleteWithdrawCall__Outputs(this);
  }
}

export class CompleteWithdrawCall__Inputs {
  _call: CompleteWithdrawCall;

  constructor(call: CompleteWithdrawCall) {
    this._call = call;
  }
}

export class CompleteWithdrawCall__Outputs {
  _call: CompleteWithdrawCall;

  constructor(call: CompleteWithdrawCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get creditor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get mintShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitRoundsCall extends ethereum.Call {
  get inputs(): InitRoundsCall__Inputs {
    return new InitRoundsCall__Inputs(this);
  }

  get outputs(): InitRoundsCall__Outputs {
    return new InitRoundsCall__Outputs(this);
  }
}

export class InitRoundsCall__Inputs {
  _call: InitRoundsCall;

  constructor(call: InitRoundsCall) {
    this._call = call;
  }

  get numRounds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitRoundsCall__Outputs {
  _call: InitRoundsCall;

  constructor(call: InitRoundsCall) {
    this._call = call;
  }
}

export class InitiateMigrationCall extends ethereum.Call {
  get inputs(): InitiateMigrationCall__Inputs {
    return new InitiateMigrationCall__Inputs(this);
  }

  get outputs(): InitiateMigrationCall__Outputs {
    return new InitiateMigrationCall__Outputs(this);
  }
}

export class InitiateMigrationCall__Inputs {
  _call: InitiateMigrationCall;

  constructor(call: InitiateMigrationCall) {
    this._call = call;
  }
}

export class InitiateMigrationCall__Outputs {
  _call: InitiateMigrationCall;

  constructor(call: InitiateMigrationCall) {
    this._call = call;
  }
}

export class InitiateWithdrawCall extends ethereum.Call {
  get inputs(): InitiateWithdrawCall__Inputs {
    return new InitiateWithdrawCall__Inputs(this);
  }

  get outputs(): InitiateWithdrawCall__Outputs {
    return new InitiateWithdrawCall__Outputs(this);
  }
}

export class InitiateWithdrawCall__Inputs {
  _call: InitiateWithdrawCall;

  constructor(call: InitiateWithdrawCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitiateWithdrawCall__Outputs {
  _call: InitiateWithdrawCall;

  constructor(call: InitiateWithdrawCall) {
    this._call = call;
  }
}

export class MigrateVaultCall extends ethereum.Call {
  get inputs(): MigrateVaultCall__Inputs {
    return new MigrateVaultCall__Inputs(this);
  }

  get outputs(): MigrateVaultCall__Outputs {
    return new MigrateVaultCall__Outputs(this);
  }
}

export class MigrateVaultCall__Inputs {
  _call: MigrateVaultCall;

  constructor(call: MigrateVaultCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MigrateVaultCall__Outputs {
  _call: MigrateVaultCall;

  constructor(call: MigrateVaultCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OpenGlpPositionCall extends ethereum.Call {
  get inputs(): OpenGlpPositionCall__Inputs {
    return new OpenGlpPositionCall__Inputs(this);
  }

  get outputs(): OpenGlpPositionCall__Outputs {
    return new OpenGlpPositionCall__Outputs(this);
  }
}

export class OpenGlpPositionCall__Inputs {
  _call: OpenGlpPositionCall;

  constructor(call: OpenGlpPositionCall) {
    this._call = call;
  }

  get glpAllocation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OpenGlpPositionCall__Outputs {
  _call: OpenGlpPositionCall;

  constructor(call: OpenGlpPositionCall) {
    this._call = call;
  }
}

export class PauseDepositsCall extends ethereum.Call {
  get inputs(): PauseDepositsCall__Inputs {
    return new PauseDepositsCall__Inputs(this);
  }

  get outputs(): PauseDepositsCall__Outputs {
    return new PauseDepositsCall__Outputs(this);
  }
}

export class PauseDepositsCall__Inputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class PauseDepositsCall__Outputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class QueueHedgeRebalanceCall extends ethereum.Call {
  get inputs(): QueueHedgeRebalanceCall__Inputs {
    return new QueueHedgeRebalanceCall__Inputs(this);
  }

  get outputs(): QueueHedgeRebalanceCall__Outputs {
    return new QueueHedgeRebalanceCall__Outputs(this);
  }
}

export class QueueHedgeRebalanceCall__Inputs {
  _call: QueueHedgeRebalanceCall;

  constructor(call: QueueHedgeRebalanceCall) {
    this._call = call;
  }

  get sbtcAllocation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sethAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sethAction(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get sbtcAction(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class QueueHedgeRebalanceCall__Outputs {
  _call: QueueHedgeRebalanceCall;

  constructor(call: QueueHedgeRebalanceCall) {
    this._call = call;
  }
}

export class QueueTracerCloseCall extends ethereum.Call {
  get inputs(): QueueTracerCloseCall__Inputs {
    return new QueueTracerCloseCall__Inputs(this);
  }

  get outputs(): QueueTracerCloseCall__Outputs {
    return new QueueTracerCloseCall__Outputs(this);
  }
}

export class QueueTracerCloseCall__Inputs {
  _call: QueueTracerCloseCall;

  constructor(call: QueueTracerCloseCall) {
    this._call = call;
  }

  get sbtcAllocation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sethAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class QueueTracerCloseCall__Outputs {
  _call: QueueTracerCloseCall;

  constructor(call: QueueTracerCloseCall) {
    this._call = call;
  }
}

export class QueueTracerOpenCall extends ethereum.Call {
  get inputs(): QueueTracerOpenCall__Inputs {
    return new QueueTracerOpenCall__Inputs(this);
  }

  get outputs(): QueueTracerOpenCall__Outputs {
    return new QueueTracerOpenCall__Outputs(this);
  }
}

export class QueueTracerOpenCall__Inputs {
  _call: QueueTracerOpenCall;

  constructor(call: QueueTracerOpenCall) {
    this._call = call;
  }

  get sbtcAllocation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sethAllocation(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class QueueTracerOpenCall__Outputs {
  _call: QueueTracerOpenCall;

  constructor(call: QueueTracerOpenCall) {
    this._call = call;
  }
}

export class RecoverEthCall extends ethereum.Call {
  get inputs(): RecoverEthCall__Inputs {
    return new RecoverEthCall__Inputs(this);
  }

  get outputs(): RecoverEthCall__Outputs {
    return new RecoverEthCall__Outputs(this);
  }
}

export class RecoverEthCall__Inputs {
  _call: RecoverEthCall;

  constructor(call: RecoverEthCall) {
    this._call = call;
  }
}

export class RecoverEthCall__Outputs {
  _call: RecoverEthCall;

  constructor(call: RecoverEthCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeAllowancesCall extends ethereum.Call {
  get inputs(): RevokeAllowancesCall__Inputs {
    return new RevokeAllowancesCall__Inputs(this);
  }

  get outputs(): RevokeAllowancesCall__Outputs {
    return new RevokeAllowancesCall__Outputs(this);
  }
}

export class RevokeAllowancesCall__Inputs {
  _call: RevokeAllowancesCall;

  constructor(call: RevokeAllowancesCall) {
    this._call = call;
  }
}

export class RevokeAllowancesCall__Outputs {
  _call: RevokeAllowancesCall;

  constructor(call: RevokeAllowancesCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RollToNextPositionCall extends ethereum.Call {
  get inputs(): RollToNextPositionCall__Inputs {
    return new RollToNextPositionCall__Inputs(this);
  }

  get outputs(): RollToNextPositionCall__Outputs {
    return new RollToNextPositionCall__Outputs(this);
  }
}

export class RollToNextPositionCall__Inputs {
  _call: RollToNextPositionCall;

  constructor(call: RollToNextPositionCall) {
    this._call = call;
  }
}

export class RollToNextPositionCall__Outputs {
  _call: RollToNextPositionCall;

  constructor(call: RollToNextPositionCall) {
    this._call = call;
  }
}

export class SetBtcLeveragePoolCall extends ethereum.Call {
  get inputs(): SetBtcLeveragePoolCall__Inputs {
    return new SetBtcLeveragePoolCall__Inputs(this);
  }

  get outputs(): SetBtcLeveragePoolCall__Outputs {
    return new SetBtcLeveragePoolCall__Outputs(this);
  }
}

export class SetBtcLeveragePoolCall__Inputs {
  _call: SetBtcLeveragePoolCall;

  constructor(call: SetBtcLeveragePoolCall) {
    this._call = call;
  }

  get _leverageSet(): SetBtcLeveragePoolCall_leverageSetStruct {
    return changetype<SetBtcLeveragePoolCall_leverageSetStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBtcLeveragePoolCall__Outputs {
  _call: SetBtcLeveragePoolCall;

  constructor(call: SetBtcLeveragePoolCall) {
    this._call = call;
  }
}

export class SetBtcLeveragePoolCall_leverageSetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get poolCommitter(): Address {
    return this[1].toAddress();
  }

  get leveragePool(): Address {
    return this[2].toAddress();
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetDepositFeeCall extends ethereum.Call {
  get inputs(): SetDepositFeeCall__Inputs {
    return new SetDepositFeeCall__Inputs(this);
  }

  get outputs(): SetDepositFeeCall__Outputs {
    return new SetDepositFeeCall__Outputs(this);
  }
}

export class SetDepositFeeCall__Inputs {
  _call: SetDepositFeeCall;

  constructor(call: SetDepositFeeCall) {
    this._call = call;
  }

  get newDepositFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositFeeCall__Outputs {
  _call: SetDepositFeeCall;

  constructor(call: SetDepositFeeCall) {
    this._call = call;
  }
}

export class SetEpochDurationCall extends ethereum.Call {
  get inputs(): SetEpochDurationCall__Inputs {
    return new SetEpochDurationCall__Inputs(this);
  }

  get outputs(): SetEpochDurationCall__Outputs {
    return new SetEpochDurationCall__Outputs(this);
  }
}

export class SetEpochDurationCall__Inputs {
  _call: SetEpochDurationCall;

  constructor(call: SetEpochDurationCall) {
    this._call = call;
  }

  get _newEpochDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEpochDurationCall__Outputs {
  _call: SetEpochDurationCall;

  constructor(call: SetEpochDurationCall) {
    this._call = call;
  }
}

export class SetEthLeveragePoolCall extends ethereum.Call {
  get inputs(): SetEthLeveragePoolCall__Inputs {
    return new SetEthLeveragePoolCall__Inputs(this);
  }

  get outputs(): SetEthLeveragePoolCall__Outputs {
    return new SetEthLeveragePoolCall__Outputs(this);
  }
}

export class SetEthLeveragePoolCall__Inputs {
  _call: SetEthLeveragePoolCall;

  constructor(call: SetEthLeveragePoolCall) {
    this._call = call;
  }

  get _leverageSet(): SetEthLeveragePoolCall_leverageSetStruct {
    return changetype<SetEthLeveragePoolCall_leverageSetStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEthLeveragePoolCall__Outputs {
  _call: SetEthLeveragePoolCall;

  constructor(call: SetEthLeveragePoolCall) {
    this._call = call;
  }
}

export class SetEthLeveragePoolCall_leverageSetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get poolCommitter(): Address {
    return this[1].toAddress();
  }

  get leveragePool(): Address {
    return this[2].toAddress();
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetHedgeStakingActiveCall extends ethereum.Call {
  get inputs(): SetHedgeStakingActiveCall__Inputs {
    return new SetHedgeStakingActiveCall__Inputs(this);
  }

  get outputs(): SetHedgeStakingActiveCall__Outputs {
    return new SetHedgeStakingActiveCall__Outputs(this);
  }
}

export class SetHedgeStakingActiveCall__Inputs {
  _call: SetHedgeStakingActiveCall;

  constructor(call: SetHedgeStakingActiveCall) {
    this._call = call;
  }

  get _stakingActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetHedgeStakingActiveCall__Outputs {
  _call: SetHedgeStakingActiveCall;

  constructor(call: SetHedgeStakingActiveCall) {
    this._call = call;
  }
}

export class SetLeverageSetIndexCall extends ethereum.Call {
  get inputs(): SetLeverageSetIndexCall__Inputs {
    return new SetLeverageSetIndexCall__Inputs(this);
  }

  get outputs(): SetLeverageSetIndexCall__Outputs {
    return new SetLeverageSetIndexCall__Outputs(this);
  }
}

export class SetLeverageSetIndexCall__Inputs {
  _call: SetLeverageSetIndexCall;

  constructor(call: SetLeverageSetIndexCall) {
    this._call = call;
  }

  get _btcLeverageSet(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ethLeverageSet(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLeverageSetIndexCall__Outputs {
  _call: SetLeverageSetIndexCall;

  constructor(call: SetLeverageSetIndexCall) {
    this._call = call;
  }
}

export class SetManagementFeeCall extends ethereum.Call {
  get inputs(): SetManagementFeeCall__Inputs {
    return new SetManagementFeeCall__Inputs(this);
  }

  get outputs(): SetManagementFeeCall__Outputs {
    return new SetManagementFeeCall__Outputs(this);
  }
}

export class SetManagementFeeCall__Inputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }

  get newManagementFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagementFeeCall__Outputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get newPerformanceFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetScaleCall extends ethereum.Call {
  get inputs(): SetScaleCall__Inputs {
    return new SetScaleCall__Inputs(this);
  }

  get outputs(): SetScaleCall__Outputs {
    return new SetScaleCall__Outputs(this);
  }
}

export class SetScaleCall__Inputs {
  _call: SetScaleCall;

  constructor(call: SetScaleCall) {
    this._call = call;
  }

  get _newScale(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetScaleCall__Outputs {
  _call: SetScaleCall;

  constructor(call: SetScaleCall) {
    this._call = call;
  }
}

export class SetTcrStrategyCall extends ethereum.Call {
  get inputs(): SetTcrStrategyCall__Inputs {
    return new SetTcrStrategyCall__Inputs(this);
  }

  get outputs(): SetTcrStrategyCall__Outputs {
    return new SetTcrStrategyCall__Outputs(this);
  }
}

export class SetTcrStrategyCall__Inputs {
  _call: SetTcrStrategyCall;

  constructor(call: SetTcrStrategyCall) {
    this._call = call;
  }

  get _tcrStrategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTcrStrategyCall__Outputs {
  _call: SetTcrStrategyCall;

  constructor(call: SetTcrStrategyCall) {
    this._call = call;
  }
}

export class SetWhitelistLibraryCall extends ethereum.Call {
  get inputs(): SetWhitelistLibraryCall__Inputs {
    return new SetWhitelistLibraryCall__Inputs(this);
  }

  get outputs(): SetWhitelistLibraryCall__Outputs {
    return new SetWhitelistLibraryCall__Outputs(this);
  }
}

export class SetWhitelistLibraryCall__Inputs {
  _call: SetWhitelistLibraryCall;

  constructor(call: SetWhitelistLibraryCall) {
    this._call = call;
  }

  get _newWhitelistLibrary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWhitelistLibraryCall__Outputs {
  _call: SetWhitelistLibraryCall;

  constructor(call: SetWhitelistLibraryCall) {
    this._call = call;
  }
}

export class SetWithdrawalFeeCall extends ethereum.Call {
  get inputs(): SetWithdrawalFeeCall__Inputs {
    return new SetWithdrawalFeeCall__Inputs(this);
  }

  get outputs(): SetWithdrawalFeeCall__Outputs {
    return new SetWithdrawalFeeCall__Outputs(this);
  }
}

export class SetWithdrawalFeeCall__Inputs {
  _call: SetWithdrawalFeeCall;

  constructor(call: SetWithdrawalFeeCall) {
    this._call = call;
  }

  get newWithdrawalFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawalFeeCall__Outputs {
  _call: SetWithdrawalFeeCall;

  constructor(call: SetWithdrawalFeeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseDepositsCall extends ethereum.Call {
  get inputs(): UnpauseDepositsCall__Inputs {
    return new UnpauseDepositsCall__Inputs(this);
  }

  get outputs(): UnpauseDepositsCall__Outputs {
    return new UnpauseDepositsCall__Outputs(this);
  }
}

export class UnpauseDepositsCall__Inputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall__Outputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class UnstakeAllHedgesCall extends ethereum.Call {
  get inputs(): UnstakeAllHedgesCall__Inputs {
    return new UnstakeAllHedgesCall__Inputs(this);
  }

  get outputs(): UnstakeAllHedgesCall__Outputs {
    return new UnstakeAllHedgesCall__Outputs(this);
  }
}

export class UnstakeAllHedgesCall__Inputs {
  _call: UnstakeAllHedgesCall;

  constructor(call: UnstakeAllHedgesCall) {
    this._call = call;
  }
}

export class UnstakeAllHedgesCall__Outputs {
  _call: UnstakeAllHedgesCall;

  constructor(call: UnstakeAllHedgesCall) {
    this._call = call;
  }
}

export class UnstakePartialHedgesCall extends ethereum.Call {
  get inputs(): UnstakePartialHedgesCall__Inputs {
    return new UnstakePartialHedgesCall__Inputs(this);
  }

  get outputs(): UnstakePartialHedgesCall__Outputs {
    return new UnstakePartialHedgesCall__Outputs(this);
  }
}

export class UnstakePartialHedgesCall__Inputs {
  _call: UnstakePartialHedgesCall;

  constructor(call: UnstakePartialHedgesCall) {
    this._call = call;
  }

  get _sbtcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sethAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakePartialHedgesCall__Outputs {
  _call: UnstakePartialHedgesCall;

  constructor(call: UnstakePartialHedgesCall) {
    this._call = call;
  }
}

export class UpdateChainlinkWrapperCall extends ethereum.Call {
  get inputs(): UpdateChainlinkWrapperCall__Inputs {
    return new UpdateChainlinkWrapperCall__Inputs(this);
  }

  get outputs(): UpdateChainlinkWrapperCall__Outputs {
    return new UpdateChainlinkWrapperCall__Outputs(this);
  }
}

export class UpdateChainlinkWrapperCall__Inputs {
  _call: UpdateChainlinkWrapperCall;

  constructor(call: UpdateChainlinkWrapperCall) {
    this._call = call;
  }

  get _chainlinkWrapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateChainlinkWrapperCall__Outputs {
  _call: UpdateChainlinkWrapperCall;

  constructor(call: UpdateChainlinkWrapperCall) {
    this._call = call;
  }
}

export class UpdateGlpPricingCall extends ethereum.Call {
  get inputs(): UpdateGlpPricingCall__Inputs {
    return new UpdateGlpPricingCall__Inputs(this);
  }

  get outputs(): UpdateGlpPricingCall__Outputs {
    return new UpdateGlpPricingCall__Outputs(this);
  }
}

export class UpdateGlpPricingCall__Inputs {
  _call: UpdateGlpPricingCall;

  constructor(call: UpdateGlpPricingCall) {
    this._call = call;
  }

  get _glpPricing(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateGlpPricingCall__Outputs {
  _call: UpdateGlpPricingCall;

  constructor(call: UpdateGlpPricingCall) {
    this._call = call;
  }
}

export class UpdateHedgePricingCall extends ethereum.Call {
  get inputs(): UpdateHedgePricingCall__Inputs {
    return new UpdateHedgePricingCall__Inputs(this);
  }

  get outputs(): UpdateHedgePricingCall__Outputs {
    return new UpdateHedgePricingCall__Outputs(this);
  }
}

export class UpdateHedgePricingCall__Inputs {
  _call: UpdateHedgePricingCall;

  constructor(call: UpdateHedgePricingCall) {
    this._call = call;
  }

  get _hedgePricing(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateHedgePricingCall__Outputs {
  _call: UpdateHedgePricingCall;

  constructor(call: UpdateHedgePricingCall) {
    this._call = call;
  }
}

export class UpdateSbtcStakingCall extends ethereum.Call {
  get inputs(): UpdateSbtcStakingCall__Inputs {
    return new UpdateSbtcStakingCall__Inputs(this);
  }

  get outputs(): UpdateSbtcStakingCall__Outputs {
    return new UpdateSbtcStakingCall__Outputs(this);
  }
}

export class UpdateSbtcStakingCall__Inputs {
  _call: UpdateSbtcStakingCall;

  constructor(call: UpdateSbtcStakingCall) {
    this._call = call;
  }

  get _sbtcStaking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSbtcStakingCall__Outputs {
  _call: UpdateSbtcStakingCall;

  constructor(call: UpdateSbtcStakingCall) {
    this._call = call;
  }
}

export class UpdateSethStakingCall extends ethereum.Call {
  get inputs(): UpdateSethStakingCall__Inputs {
    return new UpdateSethStakingCall__Inputs(this);
  }

  get outputs(): UpdateSethStakingCall__Outputs {
    return new UpdateSethStakingCall__Outputs(this);
  }
}

export class UpdateSethStakingCall__Inputs {
  _call: UpdateSethStakingCall;

  constructor(call: UpdateSethStakingCall) {
    this._call = call;
  }

  get _sethStaking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSethStakingCall__Outputs {
  _call: UpdateSethStakingCall;

  constructor(call: UpdateSethStakingCall) {
    this._call = call;
  }
}

export class UpdateSwapSlippageCall extends ethereum.Call {
  get inputs(): UpdateSwapSlippageCall__Inputs {
    return new UpdateSwapSlippageCall__Inputs(this);
  }

  get outputs(): UpdateSwapSlippageCall__Outputs {
    return new UpdateSwapSlippageCall__Outputs(this);
  }
}

export class UpdateSwapSlippageCall__Inputs {
  _call: UpdateSwapSlippageCall;

  constructor(call: UpdateSwapSlippageCall) {
    this._call = call;
  }

  get _newSlippage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSwapSlippageCall__Outputs {
  _call: UpdateSwapSlippageCall;

  constructor(call: UpdateSwapSlippageCall) {
    this._call = call;
  }
}

export class WhitelistDepositCall extends ethereum.Call {
  get inputs(): WhitelistDepositCall__Inputs {
    return new WhitelistDepositCall__Inputs(this);
  }

  get outputs(): WhitelistDepositCall__Outputs {
    return new WhitelistDepositCall__Outputs(this);
  }
}

export class WhitelistDepositCall__Inputs {
  _call: WhitelistDepositCall;

  constructor(call: WhitelistDepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get merkleproof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class WhitelistDepositCall__Outputs {
  _call: WhitelistDepositCall;

  constructor(call: WhitelistDepositCall) {
    this._call = call;
  }
}
